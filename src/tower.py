from typing import List
import tensorflow as tf
from copy import deepcopy
import tensorflow_recommenders as tfrs

# Third-party
from src.embedding import EmbeddingModel

class Tower(tf.keras.Model):

    def __init__(
        self,
        embedding_model: EmbeddingModel,
        cross_layer: tfrs.layers.dcn.Cross = None,
        dense_layers_sizes: List[int] = [],
    ) -> 'Tower':
        """
            Tower Model.
            
            Parameters:
                - embedding_model (tf.keras.Model): a model that transforms inputs to embeddings.
                - cross_layer (tfrs.layers.dcn.Cross): a Cross layer to perform feature crossing. Defaults to `None`.
                - dense_layers_sizes (tf.keras.Sequential): a sequence of layers to perform deep feature interaction. Defaults to `[]`.
        
        """
        super().__init__()

        self._embedding_model = embedding_model
        self._cross_layer = deepcopy(cross_layer) if cross_layer else None

        self._dense_layers = tf.keras.Sequential(
            # With ReLU activation
            [
                tf.keras.layers.Dense(layer_size, activation="relu")
                for layer_size in dense_layers_sizes[:-1]
            ] +
            # Without activation
            [
                tf.keras.layers.Dense(layer_size)
                for layer_size in dense_layers_sizes[-1:]
            ]
        )


    def call(
        self,
        inputs: tf.Tensor,
    ) -> tf.Tensor:
        """
            Calls the model on the input tensor.

            Parameters:
                - inputs (tf.Tensor): A tensor containing input data to be processed by the embedding model. 

            Returns:
                - (tf.Tensor): The output tensor generated by the model. 
        """
        x = self._embedding_model(inputs)
        x = self._cross_layer(x) if self._cross_layer else x
        x = self._dense_layers(x) if self._dense_layers else x
        return x
